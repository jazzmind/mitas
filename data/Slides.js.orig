import React, { useState, useEffect, useRef } from 'react';
import { AnimatedSection } from '../components/AnimatedSection';
import { slideData } from '@/data/pitchDeckContent';
import { SlideProps } from '@/data/types';
import * as Icons from 'lucide-react';
//import { IntroSlide } from '@/components/slides/IntroSlide';

// Create a separate component for the first slide to handle its state
const IntroSlide = ({ slide, props }: { slide: any; props: SlideProps }) => {
  const [expandedFeature, setExpandedFeature] = useState<number | null>(null);
  const slideRef = useRef<HTMLDivElement>(null);
  const [isScrollLocked, setIsScrollLocked] = useState(false);
  const lastScrollY = useRef(0);
  const [scrollDirection, setScrollDirection] = useState<'up' | 'down'>('down');

  const lockScroll = () => {
    document.body.style.overflow = 'hidden';
  };

  const unlockScroll = () => {
    document.body.style.overflow = '';
  };

  useEffect(() => {
    if (!props.isScrollView) return;

    const handleScroll = () => {
      if (!slideRef.current || isScrollLocked) return;

      const currentScrollY = window.scrollY;
      const direction = currentScrollY > lastScrollY.current ? 'down' : 'up';
      setScrollDirection(direction);
      lastScrollY.current = currentScrollY;

      const rect = slideRef.current.getBoundingClientRect();
      const scrollProgress = window.scrollY / (document.documentElement.scrollHeight - window.innerHeight);

      const handleExpansion = (index: number | null) => {
        setExpandedFeature(index);
        lockScroll();
        setIsScrollLocked(true);
        setTimeout(() => {
          unlockScroll();
          setIsScrollLocked(false);
        }, 800);
      };

      if (direction === 'down') {
        if (scrollProgress > 0.001 && expandedFeature === null) {
          handleExpansion(0);
        } else if (scrollProgress > 0.01 && expandedFeature === 0) {
          handleExpansion(1);
        } else if (scrollProgress > 0.02 && expandedFeature === 1) {
          handleExpansion(2);
        }
      } else {
        // Scrolling up
        if (scrollProgress < 0.001 && expandedFeature !== null) {
          handleExpansion(null); // Reset all
        } else if (scrollProgress < 0.02 && expandedFeature === 2) {
          handleExpansion(1);
        } else if (scrollProgress < .01 && expandedFeature === 1) {
          handleExpansion(1);
        }

      }
      console.log(scrollProgress);
      if (scrollProgress < 0.001) {
        handleExpansion(null);
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => {
      window.removeEventListener('scroll', handleScroll);
      document.body.style.overflow = '';
    };
  }, [props.isScrollView, expandedFeature, isScrollLocked]);

  const handleFeatureClick = (index: number) => {
    setExpandedFeature(expandedFeature === index ? null : index);
  };

  return (
    <div className="space-y-8" ref={slideRef}>
      <AnimatedSection show={props.showElements}>
        <h1 className="text-6xl font-bold text-white drop-shadow-[0_2px_2px_rgba(0,0,0,0.5)] mb-8 text-center">{slideData[0].title}</h1>
        <div className="text-center space-y-4 relative">
          <h1 className={`text-4xl font-bold ${props.isScrollView ? 'text-white' : 'text-mit-red'} drop-shadow-[0_2px_2px_rgba(0,0,0,0.5)]`}>
            {slide.subtitle}
          </h1>
          <p className="text-xl text-gray-100 drop-shadow-[0_1px_1px_rgba(0,0,0,0.8)] font-medium">
            {slide.description}
          </p>
        </div>
      </AnimatedSection>

      {props.isScrollView && (
      <AnimatedSection show={props.showElements}>
      <div className="grid grid-cols-3 gap-6">
        {slide.actions.map((action: any, i: number) => (
          <div
            key={i}
            className="p-6 bg-gray-50 rounded-lg hover:shadow-md transition-shadow cursor-pointer"
            onClick={() => props.setModalContent({
              title: action.title,
              content: (
                <div>
                  <p>{action.description}</p>
                  <p className="mt-4 text-mit-red">Click to continue â†’</p>
                </div>
              )
            })}
          >
            <h3 className="font-semibold text-mit-red mb-2">{action.title}</h3>
            <p className="text-sm">{action.description}</p>
          </div>
        ))}
      </div>
    </AnimatedSection>
    )}
      <AnimatedSection show={props.showElements} delay={200}>
        <div className="relative h-[400px] transition-all duration-500">
          <div className="flex justify-center space-x-8 items-center h-full">
            {slide.features.map((feature: any, i: number) => {
              const Icon = Icons[feature.icon as keyof typeof Icons] as React.ElementType;
              const isExpanded = expandedFeature === i;
              const isOtherExpanded = expandedFeature !== null && expandedFeature !== i;
              
              return (
                <div
                  key={i}
                  className={`
                    transition-all duration-500 ease-in-out 
                    bg-white rounded-lg shadow-md 
                    ${isExpanded ? 'w-[600px] h-[350px] z-10' : 'w-[250px] h-[175px]'}
                    ${isOtherExpanded ? 'opacity-30 scale-90' : 'opacity-100'}
                    cursor-pointer hover:shadow-lg
                  `}
                  onClick={() => handleFeatureClick(i)}
                >
                  <div className={`
                    p-6 h-full flex flex-col
                    ${isExpanded ? 'items-start text-left' : 'items-center text-center'}
                  `}>
                    <Icon 
                      className={`
                        text-mit-red mb-4 transition-all
                        ${isExpanded ? 'w-12 h-12' : 'w-8 h-8'}
                      `}
                    />
                    <h3 className={`
                      font-semibold mb-2 transition-all
                      ${isExpanded ? 'text-xl' : 'text-base'}
                    `}>
                      {feature.title}
                    </h3>
                    <p className="text-sm text-gray-600 mb-4">{feature.description}</p>
                    
                    {isExpanded && (
                      <AnimatedSection show={true} delay={100}>
                        <div className="space-y-4 mt-4">
                          <h4 className="font-semibold text-mit-red">Key Focus Areas:</h4>
                          <ul className="space-y-2">
                            {feature.modal.bullets.map((bullet: string, j: number) => (
                              <li key={j} className="flex items-center">
                                <Icons.ArrowRight className="text-mit-red mr-2" size={16} />
                                <span dangerouslySetInnerHTML={{ __html: bullet }}></span>
                              </li>
                            ))}
                          </ul>
                        </div>
                      </AnimatedSection>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </AnimatedSection>

    </div>
  );
};

const renderStats = (slide: any, props: SlideProps) => {
  // Handle Partnership Network slide differently
  if (slide.partnerships) {
    return (
      <div className="space-y-8">
      <h2 className={`text-4xl font-bold mb-16 ${props.isScrollView ? 'text-white' : 'text-mit-red'} text-center`}>{slide.title}</h2>

        <AnimatedSection show={props.showElements}>
          <div className="grid grid-cols-3 gap-6">
            {Object.entries(slide.partnerships).map(([key, items], i) => (
              <div key={key} className="p-6 bg-gray-50 rounded-lg">
                <h3 className="font-semibold text-mit-red mb-4 capitalize">{key}</h3>
                <ul className="space-y-2">
                  {(items as string[]).map((item, j) => (
                    <li key={j} className="flex items-center">
                      <Icons.ArrowRight className="text-mit-red mr-2" size={16} />
                      <span>{item}</span>
                    </li>
                  ))}
                </ul>
              </div>
            ))}
          </div>
        </AnimatedSection>
        
        <AnimatedSection show={props.showElements} delay={200}>
          <div className="grid grid-cols-4 gap-4">
            {slide.highlights.map((highlight: string, i: number) => (
              <div key={i} className="text-center p-4 bg-gray-50 rounded-lg">
                <span className="text-sm text-mit-red">{highlight}</span>
              </div>
            ))}
          </div>
        </AnimatedSection>
      </div>
    );
  }

  // Original stats rendering for other slides
  return (
    <div className="space-y-6">
      <h2 className={`text-4xl font-bold mb-16 ${props.isScrollView ? 'text-white' : 'text-mit-red'} text-center`}>{slide.title}</h2>

      {slide.sections.map((section: any, i: number) => (
        <AnimatedSection key={i} show={props.showElements} delay={i * 200}>
          <div className="bg-gray-50 p-6 rounded-lg">
            <h3 className="text-xl font-semibold text-mit-red mb-4">{section.title}</h3>
            {section.stats ? (
              <div className="grid grid-cols-3 gap-4">
                {section.stats.map((stat: any, j: number) => (
                  <div key={j} className="text-center">
                    <div className="text-2xl font-bold text-mit-red">{stat.value}</div>
                    <div className="text-sm text-gray-600">{stat.label}</div>
                  </div>
                ))}
              </div>
            ) : (
              <ul className="space-y-2">
                {section.bullets.map((bullet: string, j: number) => (
                  <li key={j} className="flex items-center">
                    <Icons.ArrowRight className="text-mit-red mr-2" size={16} />
                    <span dangerouslySetInnerHTML={{ __html: bullet }}></span>
                  </li>
                ))}
              </ul>
            )}
          </div>
        </AnimatedSection>
      ))}
    </div>
  );
};

const renderTimeline = (slide: any, props: SlideProps) => (
  <div className="space-y-8">
    <h2 className={`text-4xl font-bold mb-16 ${props.isScrollView ? 'text-white' : 'text-black'} text-center`}>{slide.title}</h2>

    <AnimatedSection show={props.showElements}>
      <div className="relative pb-8">
        <div className="h-1 bg-mit-red/20 absolute w-full top-5"></div>
        <div className="grid grid-cols-4 gap-4 relative">
          {slide.phases.map((phase: TimelinePhase, i: number) => (
            <div key={i} className="text-center">
              <div className="w-10 h-10 bg-mit-red rounded-full mx-auto mb-3 flex items-center justify-center text-white font-semibold">
                {i + 1}
              </div>
              <h4 className="font-semibold mb-1">{phase.phase}</h4>
              <p className="text-xs mt-2 max-w-[150px] mx-auto">{phase.details}</p>
            </div>
          ))}
        </div>
      </div>
    </AnimatedSection>

    <AnimatedSection show={props.showElements} delay={300}>
      <div className="grid grid-cols-4 gap-4 mt-8">
      {slide.phases.map((phase: TimelinePhase, i: number) => (
          <div key={i} className="text-center p-4 bg-gray-50 rounded-lg">
            <span className="text-sm text-mit-red font-medium">{phase.duration}</span>
          </div>
        ))}
      </div>
    </AnimatedSection>
  </div>
);

const renderCandidateProfile = (slide: any, props: SlideProps) => (
  <div className="space-y-8">
    <h2 className={`text-4xl font-bold mb-16 ${props.isScrollView ? 'text-white' : 'text-mit-red'} text-center`}>{slide.title}</h2>

    <AnimatedSection show={props.showElements}>
      <div className="grid grid-cols-2 gap-8">
        {Object.entries(slide.criteria).map(([key, criteria]: [string, any], i) => (
          <div key={key} className="bg-gray-50 p-6 rounded-lg">
            <h4 className="font-semibold mb-4 text-mit-red capitalize">{key}</h4>
            <ul className="space-y-2">
              {criteria.map((criterion: string, j: number) => (
                <li key={j} className="flex items-center">
                  <Icons.ArrowRight className="text-mit-red mr-2" size={16} />
                  <span>{criterion}</span>
                </li>
              ))}
            </ul>
          </div>
        ))}
      </div>
    </AnimatedSection>
    <AnimatedSection show={props.showElements} delay={200}>
      <div className="grid grid-cols-4 gap-4">
        {slide.successMetrics.map((metric: string, i: number) => (
          <div key={i} className="text-center p-4 bg-gray-50 rounded-lg">
            <span className="text-sm">{metric}</span>
          </div>
        ))}
      </div>
    </AnimatedSection>
  </div>
);

const renderProgram = (slide: any, props: SlideProps) => (
  <div className="space-y-8">
    <h2 className={`text-4xl font-bold mb-16 ${props.isScrollView ? 'text-white' : 'text-mit-red'} text-center`}>{slide.title}</h2>

    <AnimatedSection show={props.showElements}>
      <div className="grid grid-cols-2 gap-8">
        <div className="bg-gray-50 p-6 rounded-lg">
          <h3 className="font-semibold text-mit-red mb-4">{slide.stats.title}</h3>
          <div className="grid grid-cols-2 gap-4">
            {slide.stats.stats.map((stat: any, i: number) => (
              <div key={i} className="text-center p-4">
                <div className="text-2xl font-bold text-mit-red">{stat.value}</div>
                <div className="text-sm text-gray-600">{stat.label}</div>
              </div>
            ))}
          </div>
        </div>
        <div className="bg-gray-50 p-6 rounded-lg">
          <h3 className="font-semibold text-mit-red mb-4">Key Initiatives</h3>
          <ul className="space-y-2">
            {slide.initiatives.map((initiative: string, i: number) => (
              <li key={i} className="flex items-center">
                <Icons.ArrowRight className="text-mit-red mr-2" size={16} />
                <span>{initiative}</span>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </AnimatedSection>
  </div>
);

const renderNextSteps = (slide: any, props: SlideProps) => (
  <div className="space-y-8">
    <h2 className={`text-4xl font-bold mb-16 ${props.isScrollView ? 'text-white' : 'text-mit-red'} text-center`}>{slide.title}</h2>

    <AnimatedSection show={props.showElements}>
      <div className="grid grid-cols-3 gap-6">
        {slide.actions.map((action: any, i: number) => (
          <div
            key={i}
            className="p-6 bg-gray-50 rounded-lg hover:shadow-md transition-shadow cursor-pointer"
            onClick={() => props.setModalContent({
              title: action.title,
              content: (
                <div>
                  <p>{action.description}</p>
                  <p className="mt-4 text-mit-red">Click to continue â†’</p>
                </div>
              )
            })}
          >
            <h3 className="font-semibold text-mit-red mb-2">{action.title}</h3>
            <p className="text-sm">{action.description}</p>
          </div>
        ))}
      </div>
    </AnimatedSection>
    <AnimatedSection show={props.showElements} delay={200}>
      <div className="bg-mit-red/5 p-6 rounded-lg">
        <h3 className="font-semibold text-mit-red mb-4">Important Dates</h3>
        <div className="grid grid-cols-3 gap-4">
          {Object.entries(slide.timeline).map(([key, value]: [string, any], i) => (
            <div key={key} className="text-center">
              <div className="font-semibold text-mit-red">{value}</div>
              <div className="text-sm">{key.replace(/([A-Z])/g, ' $1').trim()}</div>
            </div>
          ))}
        </div>
      </div>
    </AnimatedSection>
  </div>
);

export const renderSlide = (slideIndex: number, props: SlideProps) => {
  const slide = slideData[slideIndex];
  
  switch (slideIndex) {
    case 0:
      return <IntroSlide slide={slide} props={props} />;
    case 1:
    case 2:
      return renderStats(slide, props);
    case 3:
      return renderCandidateProfile(slide, props);
    case 4:
      return renderStats(slide, props); // Partnership network uses same layout
    case 5:
      return renderTimeline(slide, props);
    case 6:
      return renderProgram(slide, props);
    case 7:
      return renderNextSteps(slide, props);
    default:
      return null;
  }
};